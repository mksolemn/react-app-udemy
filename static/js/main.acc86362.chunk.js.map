{"version":3,"sources":["serviceWorker.js","components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["Boolean","window","location","hostname","match","Card","name","username","email","className","src","alt","CardList","robots","cardArray","map","robot","i","id","key","SearchBar","field","searchVal","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","ErrorBoundary","state","hasError","this","error","React","Component","App","onSearchChange","event","console","log","setState","searchField","target","value","fetch","then","res","json","users","filteredRobots","filter","toLowerCase","includes","length","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","message"],"mappings":"mMAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,gCCHSC,G,MAbF,SAAC,GAA6B,IAA5BC,EAA2B,EAA3BA,KAAMC,EAAqB,EAArBA,SAAUC,EAAW,EAAXA,MAC3B,OACI,yBAAKC,UAAU,wDACX,yBAAKC,IAAK,wBAA0BJ,EAAO,WAAYK,IAAI,KAC3D,6BACI,4BAAKL,GACL,2BAAIC,GACJ,2BAAIC,OCOLI,EAbE,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACTC,EAAYD,EAAOE,KAAI,SAACC,EAAOC,GACjC,OACI,kBAAC,EAAD,CAAMC,GAAIL,EAAOI,GAAGC,GACdC,IAAKN,EAAOI,GAAGC,GACfZ,KAAMO,EAAOI,GAAGX,KAChBC,SAAUM,EAAOI,GAAGV,SACpBC,MAAOK,EAAOI,GAAGT,WAG/B,OAAO,6BAAMM,ICAFM,EAXG,SAAC,GAAuB,EAAtBC,MAAuB,IAAhBC,EAAe,EAAfA,UACvB,OACI,yBAAKb,UAAU,OACX,2BAAOA,UAAU,mCACVc,KAAK,OACLC,YAAY,gBACZC,SAAUH,MCHdI,EAHA,SAACC,GACZ,OAAO,yBAAKC,MAAO,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UAAWJ,EAAMK,WCmBlFC,E,kDAnBX,WAAYN,GAAQ,IAAD,8BACf,cAAMA,IACDO,MAAQ,CAAEC,UAAU,GAFV,E,qDAUf,OAAIC,KAAKF,MAAMC,SAEJ,qDAGJC,KAAKT,MAAMK,Y,gDAVUK,GAC5B,MAAO,CAAEF,UAAU,O,GAPCG,IAAMC,WCgDnBC,EA3Cf,kDACI,aAAe,IAAD,8BACV,gBAeJC,eAAiB,SAACC,GACdC,QAAQC,IAAIF,GACZ,EAAKG,SAAS,CAACC,YAAaJ,EAAMK,OAAOC,SAhBzC,EAAKd,MAAQ,CACTrB,OAAQ,GACRiC,YAAa,IAEjBH,QAAQC,IAAI,eANF,EADlB,gEAUyB,IAAD,OAChBD,QAAQC,IAAI,qBACZK,MAAM,8CACDC,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GAAK,OAAI,EAAKR,SAAS,CAAChC,OAAQwC,SAdlD,+BAsBc,IAAD,EACyBjB,KAAKF,MAA5BrB,EADF,EACEA,OAAQiC,EADV,EACUA,YACTQ,EAAiBzC,EAAO0C,QAAO,SAAAvC,GACjC,OAAOA,EAAMV,KAAKkD,cAAcC,SAASX,EAAYU,kBAGzD,OADAb,QAAQC,IAAI,UACc,KAAlB/B,EAAO6C,OACT,uCAEE,6BACI,kBAAC,EAAD,CAAWpC,UAAWc,KAAKK,iBAC3B,kBAAC,EAAD,KACI,kBAAC,EAAD,KACA,kBAAC,EAAD,CAAU5B,OAAQyC,WAnC1C,GAAyBf,aCDzBoB,IAASC,OACL,kBAAC,IAAMC,WAAP,KACI,6BACI,wBAAIpD,UAAU,MAAd,gBACA,kBAAC,EAAD,QAGRqD,SAASC,eAAe,SPsHtB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBhB,MAAK,SAAAiB,GACJA,EAAaC,gBAEdC,OAAM,SAAAhC,GACLM,QAAQN,MAAMA,EAAMiC,a","file":"static/js/main.acc86362.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from \"react\";\r\n\r\nconst Card = ({name, username, email}) => {\r\n    return (\r\n        <div className='dib br3 pa3 ma2 grow bw2 shadow-5 bg-dark-gray white'>\r\n            <img src={'https://robohash.org/' + name + '?200x200'} alt=\"\"/>\r\n            <div>\r\n                <h2>{name}</h2>\r\n                <p>{username}</p>\r\n                <p>{email}</p>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\n\r\nconst CardList = ({robots}) => {\r\n    const cardArray = robots.map((robot, i) => {\r\n        return (\r\n            <Card id={robots[i].id}\r\n                  key={robots[i].id}\r\n                  name={robots[i].name}\r\n                  username={robots[i].username}\r\n                  email={robots[i].email}/>\r\n        );\r\n    })\r\n    return <div>{cardArray}</div>;\r\n}\r\n\r\nexport default CardList;\r\n","import React from \"react\";\r\n\r\nconst SearchBar = ({field, searchVal}) => {\r\n    return (\r\n        <div className='pa2'>\r\n            <input className='pa3 ba b--green bg-lightest-blue'\r\n                   type=\"text\"\r\n                   placeholder='search robots'\r\n                   onChange={searchVal}/>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default SearchBar;\r\n","import React from \"react\";\r\n\r\nconst Scroll = (props) => {\r\n    return <div style={{overflowY: 'scroll', border: '5px solid black', height: '500px'}}>{props.children}</div>;\r\n};\r\nexport default Scroll;\r\n\r\n\r\n// passing\r\n","import React from \"react\";\r\nimport Card from \"./Card\";\r\nclass ErrorBoundary extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = { hasError: false };\r\n    }\r\n\r\n    static getDerivedStateFromError(error) {\r\n        return { hasError: true };\r\n    }\r\n\r\n    render() {\r\n        if (this.state.hasError) {\r\n            // You can render any custom fallback UI\r\n            return <h1>Something went wrong.</h1>;\r\n        }\r\n\r\n        return this.props.children;\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import React, {Component} from \"react\";\r\nimport tachyons from \"tachyons\";\r\nimport CardList from \"../components/CardList\";\r\nimport SearchBar from \"../components/SearchBox\";\r\nimport Scroll from \"../components/Scroll\";\r\nimport ErrorBoundary from \"../components/ErrorBoundary\";\r\n\r\nexport class App extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            robots: [],\r\n            searchField: ''\r\n        }\r\n        console.log('constructor');\r\n    }\r\n\r\n    componentDidMount() {\r\n        console.log('componentDidMount');\r\n        fetch('https://jsonplaceholder.typicode.com/users')\r\n            .then(res => res.json())\r\n            .then(users => this.setState({robots: users}));\r\n    }\r\n\r\n    onSearchChange = (event) => {\r\n        console.log(event);\r\n        this.setState({searchField: event.target.value})\r\n    }\r\n\r\n    render() {\r\n        const {robots, searchField} = this.state; // using deconstruct to assign values\r\n        const filteredRobots = robots.filter(robot => {\r\n            return robot.name.toLowerCase().includes(searchField.toLowerCase());\r\n        });\r\n        console.log('render');\r\n        return !robots.length === 0\r\n            ? <h1>Loading</h1>\r\n            : (\r\n                <div>\r\n                    <SearchBar searchVal={this.onSearchChange}/>\r\n                    <Scroll>\r\n                        <ErrorBoundary>\r\n                        <CardList robots={filteredRobots}/>\r\n                        </ErrorBoundary>\r\n                    </Scroll>\r\n                </div>\r\n            )\r\n    }\r\n}\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport App from \"./containers/App\";\r\n\r\nReactDOM.render(\r\n    <React.StrictMode>\r\n        <div>\r\n            <h1 className=\"f1\">Robo Friends</h1>\r\n            <App/>\r\n        </div>\r\n    </React.StrictMode>,\r\n    document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}